// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Essence

model AreaOfConcern {
  id             String          @id
  name           String
  activitySpaces ActivitySpace[]
  alphas         Alpha[]
  competencies   Competency[]
  activities     Activity[]
  workProducts   WorkProduct[]
  roles          Pattern[]
}

model ActivitySpace {
  id              String        @id
  name            String
  description     String
  areaOfConcernId String
  areaOfConcern   AreaOfConcern @relation(fields: [areaOfConcernId], references: [id])
  activities      Activity[]
}

model Alpha {
  id              String        @id
  name            String
  description     String
  states          State[]
  subAlphaIds     String[]
  workProducts    WorkProduct[]
  patterns        Pattern[]
  areaOfConcernId String
  areaOfConcern   AreaOfConcern @relation(fields: [areaOfConcernId], references: [id])
  subAlphas       SubAlpha[]
}

model State {
  id          String   @id
  name        String
  description String
  checklist   String[]
  alphaId     String
  alpha       Alpha    @relation(fields: [alphaId], references: [id])
}

model Competency {
  id              String        @id
  name            String
  description     String
  levels          Json[]
  areaOfConcernId String
  areaOfConcern   AreaOfConcern @relation(fields: [areaOfConcernId], references: [id])
  patterns        Pattern[]
}

// Essence Extention

model SubAlpha {
  nameId       String          @id
  name         String
  description  String
  states       SubAlphaState[]
  alphaId      String
  alpha        Alpha           @relation(fields: [alphaId], references: [id])
  methodId     String
  method       Method          @relation(fields: [methodId], references: [nameId])
  workProducts WorkProduct[]
  patterns     Pattern[]
}

model SubAlphaState {
  nameId         String    @id
  name           String
  description    String
  checklist      String[]
  subAlphaNameId String?
  subAlpha       SubAlpha? @relation(fields: [subAlphaNameId], references: [nameId])
}

// Method

model Method {
  nameId      String     @id
  name        String
  creator     String
  description String
  activities  Activity[]
  patterns    Pattern[]
  subAlphas   SubAlpha[]
}

model Activity {
  nameId               String          @id
  name                 String
  description          String
  completionCriterions Json
  entryCriterions      Json
  areasOfConcern       AreaOfConcern[]
  activitySpaces       ActivitySpace[]
  methodId             String
  method               Method          @relation(fields: [methodId], references: [nameId])
  performerRoles       Pattern[]
  workProducts         WorkProduct[]
}

model WorkProduct {
  nameId         String          @id
  name           String
  description    String
  levelOfDetails String[]
  areasOfConcern AreaOfConcern[]
  alphas         Alpha[]
  subAlphas      SubAlpha[]
  assigneeRoles  Pattern[]
  activityNameId String
  activity       Activity        @relation(fields: [activityNameId], references: [nameId])
}

model Pattern {
  nameId               String          @id
  name                 String
  description          String
  role                 Boolean
  competencies         Competency[]
  subPatternIds        String[]
  alphas               Alpha[]
  activities           Activity[]
  assignedWorkProducts WorkProduct[]
  areasOfConcern       AreaOfConcern[]
  methodId             String
  method               Method          @relation(fields: [methodId], references: [nameId])
  subAlphas            SubAlpha[]
}
